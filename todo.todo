Доработки:
 ✔ Внедрить материал дизайн @done (17-11-08 16:36)
 ✔ Ссылка вместо разметки, если человек находится не на сайте learn.javascript.ru @done (17-11-06 19:41)
 ✔ Добавить метку, если человек прочитал урок, но не выполнил задание @done (17-11-10 19:57)
 ✔ Добавить описательные тултипы @done (17-11-08 22:00)
   ✔ Сохранить старые значения меток в хранилище. Массив из 4-ех элементов. @done (17-11-08 22:00)
 ✔ Добавить возможность добавлять цвет к метке @done (17-11-10 19:57)
 ✔ Пуш элемента в массив (описание и цвет) вынести в отдельную функцию @done (17-11-10 21:00)
 ✔ Удаляя или добавляя метку - удаляется первый пустой оптион. @done (17-11-10 20:27)
 ✔ Маска для поля ввода метки. @done (17-11-10 16:07)
 ✔ Добавить описание в выпадающем списке @done (17-11-11 14:50)
 ✔ Добавить визуализацию метки @done (17-11-11 14:09)
 ✔ После удаления метки исчезает описание для S @done (17-11-11 16:03)
 ✔ Добавить snackabar с оповещение об добавлении и удалении метки. @done (17-11-11 15:08)
Модули для npm:
 ✔ gulp, zip @done (17-11-07 16:03)
 ✔ material design lite @done (17-11-07 21:50)
 ✔ color pallete @done (17-11-10 18:16)
--- ✄ -----------------------
Версия 2.0:
 ☐ Добавить прогрессбар.
   Какая логика и алгоритм работы прогрессбара?
   Всего 217 упражнений, метка "галочка" отмечает успешное изучение материала. Успешное изучение материала отмечает сам ученик. Но, если статья не прочитана за отведенное время.
   Получить все ссылки и сохранить их в объект.
   Алгоритм:
   Действия при загрузке страницы.
   Если у массива options.progress нет первого элемента, то флагу присвоить ложь, иначе присвоить истину.
     Итерируя по родительскому списку отыскать ссылку.
     В объект добавить элемент (объект), если такого не найдено: ключ - индекс итерации, значения ложные.
     [{
       'url': 'intro',
       'learned': false,
       'scrolled': 0,
       'must_scroll': 0,
       'time_spent': 0, // 3 минут
       'time_must_spend': 300000 // 5 минут
     }]
     Получить у ссылки url.
     Записать в объект ключ url с ссылкой.
     Для ключа time_must_spend присвоить значение по индексу из массива time_exercises.
     Конец итерации.
     Обновить св-во progress объекта options, сериализовать объект и сохранить в хранилище.
   иначе
     Объявить переменную с кол-вом изученных материалов - count_learnead
     Итерируя по родительскому списку.
     Получить индекс отметки.
     Если learned присвоено значение true
       Если индекс отметки нулевой, то выбрать отметку которая ассоциируется со словами изучено или усвоено, выполнено. Защитать материал изученным, инкрементировать count_learned.
       Если индекс отметки не нулевой и отметка не ассоциируется со словами изучено, усвоено, выполнено, важно, то не защитывать материал изученным.
     Если learned присвоено значение false
       присвоить метку по полученному айдишнику
     Конец итерации.
     Из итогового числа посчитать какой он процент составляет от общего кол-ва уроков.
     Если дано два числа A и B и необходимо определить, какой процент составляет число B от числа A, то
     B / A * 100
     Присвоить полученную величину прогрессбару

   [{
     'url': 'intro',
     'learned': true,
     'scrolled': 0,
     'time_must_spend: 300000,
     'time_spent': 0
   }]

   Действия при измении опции в селекте.
   В объекте progress отыскать значение по ключю в объекте по айди родителя.
   Получить у ссылки url.
   Обновить св-во progress объекта options, сериализовать объект и сохранить в хранилище.

   Алогоритм для отметки изучено:
     Время на прочтение статьи введение в javascript - 5 минут
     Элемент article должен быть прокручен до определенной точки.
     При загрузке материала получить строку запроса.
     Получить текущее время.
     Проитерировать по объекту options.progress и найти соответствие в значению ключа url в объекте под текущим индексом. Если соответсвие найдено, то сохранить объект и индекс.
     В св-во must_scroll первый элемент массива записать - отступ элемента article от начала страницы плюс высота элемента минус высота видимой области окна.
     Во второй элемент массива записать ширину экрана.
     При скролле страницы обновлять св-во scrolled, только если значение при прокрутке больше, чем значение сохраненное в св-ве scrolled объекта.
     6093, 1366 - достаточно прокрутить 6093
     6381, 1920 - нужно прокрутить 6381
     Св-во scrolled изменяется динамически при ресайзе окна. Т.е, если на мониторе прокручено 6100, то при ресайзе окна 6100 будет не достаточно, нужно минимум 6381.
     При клике на карту или при уходе со страницы записывать в св-во time_spent - результат сложение с разницей конечной метки времени от начальной метки.
     Установить флаг изучено или нет. Если величина прокрутки больше равна величины необходимой прокрутки и затраченое время больше равно величине минимальному времени - то установить истинну, иначе ложь.
     Сериализовать объект и сохранить в хранилище.
     [{
       'url': 'intro',
       'learned': false,
       'scrolled': 900,
       'must_scroll': 7273,
       'time_spent': 180000, // 3 минут
       'time_must_spend': 300000 // 5 минут
     }]

